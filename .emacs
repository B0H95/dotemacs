(global-auto-revert-mode 1)
(setq make-backup-files nil)
(setq auto-save-default nil)
(menu-bar-mode 0)
(setq scroll-step 1)
(setq inhibit-splash-screen t)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq next-line-add-newlines nil)
(setq mouse-wheel-progressive-speed nil)
(setq scroll-conservatively 10000)
(setq scroll-preserve-screen-position 1)
(setq next-screen-context-lines 33) ;; do i still need this?
(defun b0h-scroll-up ()
  (interactive)
  (scroll-down-command (/ (window-body-height) 3)))
(defun b0h-scroll-down ()
  (interactive)
  (scroll-up-command (/ (window-body-height) 3)))
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 8)
(setq-default c-default-style "linux")
(setq-default buffer-file-coding-system 'utf-8-unix)
(setq default-buffer-file-coding-system 'utf-8-unix)
(setq initial-major-mode 'fundamental-mode)
(setq initial-scratch-message nil)
(setq line-move-visual nil)
(global-set-key (kbd "C-c p") 'find-lisp-find-dired)
;; reference: https://emacs.stackexchange.com/questions/21651
(defun b0h-reasonable-window-split (&optional window)
  (cond
   ((and (> (window-width window)
            (window-height window))
         (window-splittable-p window 'horizontal))
    (with-selected-window window
      (split-window-right)))
   ((window-splittable-p window)
    (with-selected-window window
      (split-window-below)))))
(setq split-window-preferred-function #'b0h-reasonable-window-split)
(setq b0h-saved-point-line nil)
(setq b0h-saved-point-column nil)
(defun b0h-save-point ()
  (interactive)
  (progn
    (setq b0h-saved-point-line (- (line-number-at-pos) 1))
    (setq b0h-saved-point-column (- (point) (line-beginning-position)))))
(defun b0h-load-point ()
  (interactive)
  (if b0h-saved-point-line
      (if b0h-saved-point-column
          (progn
            (goto-char (point-min))
            (ignore-errors (forward-line b0h-saved-point-line))
            (ignore-errors (forward-char b0h-saved-point-column))
            (if (/= b0h-saved-point-line (- (line-number-at-pos) 1))
                (progn
                  (goto-char (point-min))
                  (ignore-errors (forward-line b0h-saved-point-line))
                  (move-end-of-line nil)))))))
;; check "M-x find-function shell-command-on-region" for details
(defun b0h-format-file (command)
  (interactive (list (read-shell-command "Shell command: ")))
  (b0h-save-point)
  (call-process-region (point-min) (point-max) shell-file-name t t nil shell-command-switch command)
  (b0h-load-point)
  (recenter-top-bottom))
(setq hi-lock-auto-select-face nil) ;; variable doesn't exist by default
(defun b0h-toggle-highlight-at-point ()
  (interactive)
  (make-local-variable 'b0h-highlights)
  (if (not (boundp 'b0h-highlights))
      (setq b0h-highlights (make-hash-table :test 'equal)))
  (save-excursion
    (let ((default-hi-lock-auto-select-face-value hi-lock-auto-select-face)
          (default-case-fold-search-value case-fold-search))
      (setq hi-lock-auto-select-face t)
      (setq case-fold-search nil)
      (if (looking-at "[[:alnum:]_]")
          (progn
            (search-forward-regexp "\\_>")
            (let ((end (point)))
              (search-backward-regexp "\\_<")
              (let ((symbol-regexp (concat "\\_<" (buffer-substring (point) end) "\\_>")))
                (if (gethash symbol-regexp b0h-highlights)
                    (progn
                      (remhash symbol-regexp b0h-highlights)
                      (unhighlight-regexp symbol-regexp))
                  (progn
                    (puthash symbol-regexp t b0h-highlights)
                    (highlight-regexp symbol-regexp (hi-lock-read-face-name))))))))
      (setq hi-lock-auto-select-face default-hi-lock-auto-select-face-value)
      (setq case-fold-search default-case-fold-search-value))))
(defun b0h-clear-all-highlights ()
  (interactive)
  (make-local-variable 'b0h-highlights)
  (if (not (boundp 'b0h-highlights))
      (setq b0h-highlights (make-hash-table :test 'equal)))
  (maphash (lambda (symbol-regexp unused)
             (unhighlight-regexp symbol-regexp))
           b0h-highlights)
  (clrhash b0h-highlights))
(global-set-key (kbd "C-c Ω a") 'b0h-toggle-highlight-at-point)
(global-set-key (kbd "C-c Ω b") 'b0h-clear-all-highlights)
(global-set-key (kbd "C-c Ω c") 'b0h-scroll-down)
(global-set-key (kbd "C-c Ω d") 'b0h-scroll-up)
(global-set-key (kbd "C-c Ω e") 'maximize-window)
(define-key key-translation-map (kbd "TAB") (kbd "M-/"))
(define-key key-translation-map (kbd "M-/") (kbd "TAB"))
(define-key key-translation-map (kbd "C-t") (kbd "C-c Ω a"))
(define-key key-translation-map (kbd "M-t") (kbd "C-c Ω b"))
(define-key key-translation-map (kbd "C-z") (kbd "TAB"))
(define-key key-translation-map (kbd "C-v") (kbd "C-c Ω c"))
(define-key key-translation-map (kbd "M-v") (kbd "C-c Ω d"))
(define-key key-translation-map (kbd "C-j") (kbd "C-c Ω e"))
(add-hook 'minibuffer-setup-hook
          (lambda ()
            (define-key key-translation-map (kbd "TAB") (kbd "TAB"))
            (define-key key-translation-map (kbd "M-/") (kbd "M-/"))
            (define-key key-translation-map (kbd "C-t") (kbd "C-t"))
            (define-key key-translation-map (kbd "M-t") (kbd "M-t"))
            (define-key key-translation-map (kbd "C-z") (kbd "M-/"))
            (define-key key-translation-map (kbd "C-v") (kbd "C-v"))
            (define-key key-translation-map (kbd "M-v") (kbd "M-v"))
            (define-key key-translation-map (kbd "C-j") (kbd "C-j"))))
(add-hook 'minibuffer-exit-hook
          (lambda ()
            (define-key key-translation-map (kbd "TAB") (kbd "M-/"))
            (define-key key-translation-map (kbd "M-/") (kbd "TAB"))
            (define-key key-translation-map (kbd "C-t") (kbd "C-c Ω a"))
            (define-key key-translation-map (kbd "M-t") (kbd "C-c Ω b"))
            (define-key key-translation-map (kbd "C-z") (kbd "TAB"))
            (define-key key-translation-map (kbd "C-v") (kbd "C-c Ω c"))
            (define-key key-translation-map (kbd "M-v") (kbd "C-c Ω d"))
            (define-key key-translation-map (kbd "C-j") (kbd "C-c Ω e"))))
(setq isearch-lazy-count t)
(fido-mode 1)
(fido-vertical-mode 1)
(set-background-color "#FFFFD7")
(blink-cursor-mode 0)
;; TODO: re-add this when some new emacs version comes along
;;       that stops hl-line-mode from overriding highlights
;; (global-hl-line-mode 1)
;; (set-face-background hl-line-face "#F0F0C9")
(define-key key-translation-map (kbd "C-o") (kbd "C-x o"))
(define-key key-translation-map (kbd "C-x o") (kbd "C-o"))
(setq column-number-mode t)
(defun b0h-delete-line ()
  (interactive)
  (if (use-region-p)
      (delete-region (region-beginning) (region-end))
    (if (= (point) (point-at-eol))
        (delete-char 1)
      (delete-region (point) (line-end-position)))))
(defun b0h-delete-word (arg)
  (interactive "p")
  (if (use-region-p)
      (delete-region (region-beginning) (region-end))
    (delete-region (point) (progn (forward-word arg) (point)))))
(defun b0h-backward-delete-word (arg)
  (interactive "p")
  (b0h-delete-word (- arg)))
(global-set-key (kbd "C-c Ω f") 'b0h-delete-line)
(global-set-key (kbd "C-c Ω g") 'b0h-delete-word)
(global-set-key (kbd "C-c Ω h") 'b0h-backward-delete-word)
(define-key key-translation-map (kbd "C-k") (kbd "C-c Ω f"))
(define-key key-translation-map (kbd "M-d") (kbd "C-c Ω g"))
(define-key key-translation-map (kbd "C-<backspace>") (kbd "C-c Ω h"))
(define-key key-translation-map (kbd "M-DEL") (kbd "C-c Ω h"))
(set-cursor-color "#F00279")
(setq b0h-theme-text-color "SystemWindowText")
(setq b0h-theme-keyword-color "#001EB0")
(setq b0h-theme-string-color "#6E0000")
(setq b0h-theme-comment-color "#015400")
(set-face-attribute 'font-lock-builtin-face nil :foreground b0h-theme-keyword-color)
(set-face-attribute 'font-lock-comment-delimiter-face nil :foreground b0h-theme-comment-color)
(set-face-attribute 'font-lock-comment-face nil :foreground b0h-theme-comment-color)
(set-face-attribute 'font-lock-constant-face nil :foreground b0h-theme-text-color)
(set-face-attribute 'font-lock-doc-face nil :foreground b0h-theme-comment-color)
(set-face-attribute 'font-lock-doc-markup-face nil :foreground b0h-theme-comment-color)
(set-face-attribute 'font-lock-function-name-face nil :foreground b0h-theme-text-color)
(set-face-attribute 'font-lock-keyword-face nil :foreground b0h-theme-keyword-color)
(set-face-attribute 'font-lock-negation-char-face nil :foreground b0h-theme-text-color)
(set-face-attribute 'font-lock-preprocessor-face nil :foreground b0h-theme-keyword-color)
(set-face-attribute 'font-lock-string-face nil :foreground b0h-theme-string-color)
(set-face-attribute 'font-lock-type-face nil :foreground b0h-theme-text-color)
(set-face-attribute 'font-lock-variable-name-face nil :foreground b0h-theme-text-color)
